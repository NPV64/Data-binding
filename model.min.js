class Model {
	constructor(el, model) {
		 this.modelContainer = new ObservableMap();
		 this.model = model;
		this.el = document.querySelector(el);
		var arrs_rect = this.el.querySelectorAll('[data-bind]')
		Array.prototype.slice.call(arrs_rect).forEach(curr => {
			const boundTo = curr.dataset['bind']
			if (curr.type == "checkbox") {var val = 'checked';}else var val = 'value';
			curr.addEventListener('input', () => {this.set(boundTo, curr['value'],false)})
			 if(curr.type=='checkbox') curr.addEventListener('change', ()=>{this.set(curr.dataset['bind'], curr[val])},false);
			this.subscribe((key,value)=>{
				if(curr.dataset['bind']==key){
                    curr['value'] = value;
                    if (curr.tagName == "SPAN" || curr.tagName == "TEXT") { curr.innerHTML = value } 
                }
			})
		});
		Array.prototype.slice.call(arrs_rect).forEach(curr=>{
		if (curr.type == "checkbox") {var val = 'checked';}else var val = 'value';
            this.modelContainer.listeners.forEach(s=>s(curr.dataset['bind'], this.get(curr.dataset['bind'])))});
	}
	
	subscribe(fn)
	{
		this.modelContainer.subscribe(fn)
	}
	
	set(key, value) {
		eval("this.model."+key+"=value");
		this.modelContainer.set(key, value);
	}
	
	get(key) {
		return eval("this.model."+key);
	}
	
	toObject()
	{
		return this.model;
	}	
	
	
}	

	
 class ObservableMap extends Map {
	constructor() { 
		super(); 
		this.listeners = [] 
	}

   subscribe(callback) {
     this.listeners.push(callback)
	  return () => this.listeners = this.listeners.filter(c => c != callback);
   }
   
   set(key, value) {
    super.set(key, value)
    this.listeners.forEach(listener => listener(key, value))
   }
}
